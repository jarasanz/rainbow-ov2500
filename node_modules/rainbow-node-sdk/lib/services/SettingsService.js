"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Utils_1 = require("../common/Utils");
const LOG_ID = "SETT/SVCE - ";
let Settings = 
/**
 * @module
 * @private
 * @name Settings
 * @version 1.69.0-debug-24th-03-2020--03-54-58.0 
 * @description
 *      This module manages the settings of the connected user.
 *      <br><br>
 *      The main methods proposed in that module allow to: <br>
 *      - Get user settings
 *      - Update user settings
 */
class Settings {
    constructor(_eventEmitter, _logger, _startConfig) {
        this.ready = false;
        this._startConfig = _startConfig;
        this._xmpp = null;
        this._rest = null;
        this._s2s = null;
        this._options = {};
        this._useXMPP = false;
        this._useS2S = false;
        this._eventEmitter = _eventEmitter;
        this._logger = _logger;
        // this.RAINBOW_PRESENCE_ONLINE = "online";
        // this.RAINBOW_PRESENCE_DONOTDISTURB = "dnd";
        // this.RAINBOW_PRESENCE_AWAY = "away";
        // this.RAINBOW_PRESENCE_INVISIBLE = "invisible";
        this.ready = false;
    }
    get startConfig() {
        return this._startConfig;
    }
    start(_options, _core) {
        let that = this;
        return new Promise(function (resolve, reject) {
            try {
                that._xmpp = _core._xmpp;
                that._rest = _core._rest;
                that._options = _options;
                that._s2s = _core._s2s;
                that._useXMPP = that._options.useXMPP;
                that._useS2S = that._options.useS2S;
                that.ready = true;
                resolve();
            }
            catch (err) {
                return reject();
            }
        });
    }
    stop() {
        let that = this;
        return new Promise(function (resolve, reject) {
            try {
                that._xmpp = null;
                that._rest = null;
                that.ready = false;
                resolve();
            }
            catch (err) {
                return reject();
            }
        });
    }
    /**
     * @private
     * @method getUserSettings
     * @instance
     * @description
     *  Get current User Settings
     * @return {Promise<UserSettings>} A promise containing the result
     */
    getUserSettings() {
        let that = this;
        return new Promise((resolve, reject) => {
            that._rest.getUserSettings().then((settings) => {
                that._logger.log("info", LOG_ID + "(getUserSettings) get successfully");
                resolve(settings);
            }).catch(function (err) {
                that._logger.log("error", LOG_ID + "(getUserSettings) error.");
                that._logger.log("internalerror", LOG_ID + "(getUserSettings) error : ", err);
                return reject(err);
            });
        });
    }
    /**
     * @private
     * @method updateUserSettings
     * @instance
     * @description
     *  Update current User Settings
     * @return {Promise<Settings, ErrorManager>} A promise containing the result
     */
    updateUserSettings(settings) {
        let that = this;
        return new Promise((resolve, reject) => {
            // Check validity
            that._rest.updateUserSettings(settings).then((newSettings) => {
                that._logger.log("info", LOG_ID + "(updateUserSettings) get successfully");
                resolve(newSettings);
            })
                .catch((err) => {
                that._logger.log("error", LOG_ID + "(updateUserSettings) error.");
                that._logger.log("internalerror", LOG_ID + "(updateUserSettings) error : ", err);
                return reject(err);
            });
        });
    }
};
Settings = __decorate([
    Utils_1.logEntryExit(LOG_ID),
    Utils_1.isStarted([])
    /**
     * @module
     * @private
     * @name Settings
     * @version 1.69.0-debug-24th-03-2020--03-54-58.0 
     * @description
     *      This module manages the settings of the connected user.
     *      <br><br>
     *      The main methods proposed in that module allow to: <br>
     *      - Get user settings
     *      - Update user settings
     */
], Settings);
exports.SettingsService = Settings;
module.exports.SettingsService = Settings;
//# sourceMappingURL=SettingsService.js.map